function p=d3dfm_plotmesh(FMg,varargin)

%   Description: 
%       Function to make map plots of Delft3D FM output 
%       Function is used within "d3dfm_mapplot.m", which is a wrapper around this function with more functionality 
%
%   Author: 
%       Chris Esposito (created 3/22/2021)
%           with contributions to the options by Diana Di Leonardo
%
%   Dependencies
%       d3dfm_readmeshgeometry
%
%   Input:
%       FMg: Mesh geometry as generated by function "d3dfm_readmeshgeometry"
%
%   Keyword-value pairs: 
%       see list w/examples below
%
%
% FMShowMesh(FMg)  Basic mesh plot.
% FMShowMesh(FMg,'facedata',C) Faces colored by data in C
% FMShowMesh(FMg, ... 'showEdges',E) Show select edges indicated by E
% FMShowMesh(FMg, ... 'showEdges',E,'showOnlyEdgeColor',edgeCell) Only show the color data of cells associated with an edge.
% FMShowMesh(FMg, ... 'showEdges',E,'showEdgeDirection',1) Show select edges indicated by E along with directional symbols.
% FMShowMesh(FMg, ... 'showEdges, E,'showEdgeColor','w')
% FMShowMesh(FMg, ... 'showEdges, E,'zoomEdge',1)
% FMShowMesh(FMg, ... 'showEdges, E,'zoomEdge',1,'zoomBuffer', 300)
%
% FMG.FACE_NODES:   the face_node variable from the FM map output. See FM_geom.m
%                   for description. (4 X NumFaces)
% FMG.NODE_X:       X coordinate of nodes (NumNodes X 1)
% FMG.NODE_Y:       Y coordinate of nodes (NumNodes X 1)
%
%Name-Value Property pairs
% 'facedata', C:    Data to show in faces (NumFaces X 1)
%'edgeColor':       The color of all grid edges, unless otherwise specified
%                   by 'showEdgeColor'; default is black; use 'none' for no
%                   edges
% 'showEdges', E:   Edges to show. Two options:
%                   1) a vector that indexes into edge_faces and edge_nodes (1xNumEdges [maximum])
%                   2) a struct with two subfields, .f, and .n. In this case
%                      the subfields are (possibly altered) subsets of
%                      edge_faces and edge_nodes. Each subfield (2 X NumEdges [maximum])
% 'showOnlyEdgeColor',edgeCell:
%                     only shows color data of cells associated with an edge
%                     edgeCell==1............show both marsh and water
%                     edgeCell==2.............show only marsh
%                     edgeCell==3.............show only water
%'showEdgeDirection' a value of 1 shows select edges with directional
%                    symbols; from 'o' to '*'
%'showEdgeColor'    the color to use for the selected edges; use either a string color
%                   symbol such as 'w' or a Matlab color triplet; default
%                   is white
%'faceTransparency' option to set the transparency (alpha value) of the
%                   faces; sets the FaceVertexAlphaData property; use an
%                   array of the same size as the data; 0 is fully
%                   transparent, and 1 is fully opaque; must also set the
%                   FaceAlpha value to 'flat' to usethis property
%'faceAlpha'        Set to 'flat' to set the faceTransparency to different
%                   values for different faces
%'zoomEdge'         option to set plot extents to the area around the shown
%                   edges; set as 1 to turn on; off by default
%'zoomArea'         option to set the plot extents to a particular area;
%                   input as a 2x2 matrix with the form:
%                   [minX, maxX, minY, maxY]; default is no zoom
%'zoomPoint'        option to zoom the map to a particular point (like a
%                   station); input is the point [x,y]; zoom is set to that point
%                   plus and minus zoomBuffer; default is no zoom
%'zoomBuffer'       option to set a buffer distance on the zoom for zoomEdge
%                   and zoomPoint; same units as data coordinate system; assumes
%                   you are using a projected coordinate system; default is
%                   500
%!!! Use zoomEdge OR zoomArea OR zoomPoint !!!
%


try
    
    debugMode=0;
    
    fn=FMg.face_nodes;
    nx=FMg.node_x;
    ny=FMg.node_y;
    fx=FMg.face_x;
    fy=FMg.face_y;
    
    
    options = struct('facedata',NaN(size(fn,2),1),'edgeColor','none','showEdges',[],...
        'showEdgeDirection',0,'showEdgeColor','w','zoomEdge',0,'zoomArea',[],...
        'zoomPoint',[],'zoomBuffer',500,'showOnlyEdgeColors',[],'faceTransparency',[],...
        'faceAlpha', 1);%set default values
    optionNames = fieldnames(options); %read option names
    
    %Parse optional inputs
    if nargin>1
        
        %count arguments
        nArgs=length(varargin);
        if rem(nArgs,2)~=0
            error('Use property name/value pairs for optional inputs')
        end
        
        for pair =reshape(varargin,2,[])
            
            if any(strcmpi(pair{1},optionNames))
                %overwrite default options
                options.(pair{1}) = pair{2};
                
                if strcmpi(pair{1},'facedata')
                    if ~isequal(size(options.(pair{1})),[size(fn,2) 1])%check size of color data
                        error('color data incorrect size')
                    end
                end
                
                if strcmpi(pair{1},'showEdges')
                    if isnumeric(options.showEdges) %in this case the input is a vector, and indexes into the second dimension of .edge_faces
                        error('option not defined!')
                        
                    elseif isstruct(options.showEdges) %in this case the input is a (possibly altered) subset of .edge_faces
                        me=options.showEdges;
                        %                         en=options.showEdges.n;
                        %                         ef=options.showEdges.f;
                    else
                        error('invalid edge input dimension')
                    end
                    
                end
                
                if strcmpi(pair{1},'zoomArea')
                    XLIMS=options.zoomArea(1:2);
                    YLIMS=options.zoomArea(3:4);
                end
                
                if strcmpi(pair{1},'showOnlyEdgeColors')
                    edgeCell=options.showOnlyEdgeColors;
                end

                
            else
                error('%s is not a recognized parameter name',pair{1})
            end
            
        end
        
    end
    
    
    hold on
    
    
    %% construct S
    S.Vertices=[nx ny];
    S.Faces=[fn'];
    S.FaceVertexCData=options.facedata;
    S.EdgeColor=options.edgeColor;
    S.FaceColor='flat';
    S.LineWidth=0.5;
    S.FaceAlpha = options.faceAlpha;
    S.FaceVertexAlphaData = options.faceTransparency;
    
    if ~isempty(options.showOnlyEdgeColors)
        if edgeCell==1  %keep marsh and open water cells
            ff=unique(me.f(:));
        elseif edgeCell==2  %keep only open water cells
            ff=unique(me.f(:,1));
        elseif edgeCell==3  %keep only marsh cells
            ff=unique(me.f(:,2));
        end
        
        facLen=1:size(S.Faces,1);
        ii=setdiff(facLen,ff);
        
        S.Faces(ii,:)=[];
        S.FaceVertexCData(ii,:)=[];
        

        
    end
    
    if ~isempty(options.zoomArea)
        fx1=fx;
        fy1=fy;
        if ~isempty(options.showOnlyEdgeColors) %if this option is used, we have to respect that restriction as well
            fx1(ii)=[];
            fy1(ii)=[];
        end
        
        
        %remove faces and face color data outside of zoom range
        ii=find(fx1<XLIMS(1) | fx1>XLIMS(2));
        jj=find(fy1<YLIMS(1) | fy1>YLIMS(2));
        
%         These lines are commented so that the zoomed figure does not show
%         ragged edges. If there is a reason to actually remove color data,
%         these lines can be uncommented.
%         S.Faces([ii;jj],:)=[];
%         S.FaceVertexCData([ii;jj],:)=[];
    end
    
    
    
    %%
    
    p=patch(S);
    axis equal
    
    if exist('me')==1
        %edge nodes
        enx=nx(me.n);
        eny=ny(me.n);
        
        %water faces associated with each edge
        wfx=fx(me.f(1,:));
        wfy=fy(me.f(1,:));
        
        %marsh faces associated with each edge
        mfx=fx(me.f(2,:));
        mfy=fy(me.f(2,:));
        
        if ~isempty(options.zoomArea)
            %remove edges and face points outside of zoom range
            
            %edge nodes
            [~, jj1]=find(enx<XLIMS(1) | enx>XLIMS(2));
            [~, jj2]=find(eny<YLIMS(1) | eny>YLIMS(2));
            
            enx(:,[jj1;jj2])=[];
            eny(:,[jj1;jj2])=[];
            
            %water faces associated with each edge
            ii=find(wfx<XLIMS(1) | wfx>XLIMS(2));
            jj=find(wfy<YLIMS(1) | wfy>YLIMS(2));
            
            wfx([ii;jj],:)=[];
            wfy([ii;jj],:)=[];
            
            %marsh faces associated with each edge
            ii=find(mfx<XLIMS(1) | mfx>XLIMS(2));
            jj=find(mfy<YLIMS(1) | mfy>YLIMS(2));
            
            mfx([ii;jj],:)=[];
            mfy([ii;jj],:)=[];
            
        end
        
    end
    
    if ~isempty(options.zoomArea)
        xlim(XLIMS);
        ylim(YLIMS);
    end
    
    if debugMode
        colormap jet
        for i=1:1000
            ii=randi(size(enx,2),1);
            
            %plot edge
            plot(enx(:,ii),eny(:,ii),'w');
            
            %plot water
            
            
            
            plot(wfx(ii),wfy(ii),'ko');
            
            %plot marsh
            plot(mfx(ii),mfy(ii),'k*');
        end
        
        
    else
        if ~isempty(options.showEdges)
            disp('show edges')
            disp('WARNING: showing edges is time consuming. use this feature with care')
            
            tic
            
            plot(enx,eny,'color',options.showEdgeColor)
            
            
            disp('time for plotting edges:')
            toc
            
        end
        
        
        if options.showEdgeDirection
            disp('show edge direction')
            disp('WARNING: showing edge direction is time consuming. use this feature with care')
            
            tic
            %plot water
            plot(wfx,wfy,'ko');
            
            %plot marsh
            plot(mfx,mfy,'k*');
            disp('time for plotting edge directions:')
            
            
        end
    end
catch
    ee=lasterror;
    keyboard
    
end

